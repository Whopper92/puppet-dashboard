diff --git a/app/views/shared/_global_nav.html.haml b/app/views/shared/_global_nav.html.haml
index 4be7116..9dfdd10 100644
--- a/app/views/shared/_global_nav.html.haml
+++ b/app/views/shared/_global_nav.html.haml
@@ -28,3 +28,5 @@
             = link_to "Inventory Search", search_nodes_path
         - Registry.each_callback :core, :global_nav_widgets do |callback|
           = callback.call self
+        - Registry.each_callback :core, :account_widgets do |callback|
+          = callback.call self
diff --git a/app/views/shared/_node_manager_sidebar_for_type.html.haml b/app/views/shared/_node_manager_sidebar_for_type.html.haml
index 3a3694e..2564c8d 100644
--- a/app/views/shared/_node_manager_sidebar_for_type.html.haml
+++ b/app/views/shared/_node_manager_sidebar_for_type.html.haml
@@ -18,5 +18,5 @@
           = link_to h(entry.name), send(path_for_show, entry)
           %span.count= entry.nodes_count
   .footer.actionbar
-    - unless SETTINGS.enable_read_only_mode
+    - unless SETTINGS.enable_read_only_mode || session['ACCESS_CONTROL_ROLE'] == 'READ_ONLY'
       = link_to "Add #{h(label.downcase)}", send(path_for_new), :class => 'button'
diff --git a/lib/tasks/classesgroups.rake b/lib/tasks/classesgroups.rake
index b15eb94..68784a7 100644
--- a/lib/tasks/classesgroups.rake
+++ b/lib/tasks/classesgroups.rake
@@ -161,6 +161,72 @@ namespace :nodegroup do
     end
   end
 
+  desc 'Edit/Add parameters for a node group'
+  task :parameters => :environment do
+    group_name = ENV['name']
+
+    if group_name.nil?
+      puts 'Must specify node group name (name=<hostname>).'
+      exit 1
+    end
+
+    begin
+      group = NodeGroup.find_by_name(group_name)
+
+      if group.nil?
+        puts "Node group #{group_name} doesn\'t exist!"
+        exit 1
+      end
+    rescue => e
+      puts "There was a problem finding the node group: #{e.message}"
+      exit 1
+    end
+
+    if ENV['parameters'].nil?
+      puts "Must specify node group parameters (parameters=param1=val1,param2=val2)"
+      exit 1
+    end
+
+    given_parameters = Hash[ ENV['parameters'].split(',').map do |param|
+      param_array = param.split('=',2)
+      if param_array.size != 2
+        raise ArgumentError, "Could not parse parameter #{param_array.first} given. Perhaps you're missing a '='"
+      end
+      if param_array[0].nil? or param_array[0].empty?
+        raise ArgumentError, "Could not parse parameters. Please check your format. Perhaps you need to name a parameter before a '='"
+      end
+      if param_array[1].nil? or param_array[1].empty?
+        raise ArgumentError, "Could not parse parameters #{param_array.first}. Please check your format"
+      end
+      param_array
+    end ]
+
+    #Check if we need to change any existing parameters
+    group.parameters.each do |parameter|
+      if given_parameters.keys.include? parameter.name
+        #This deletes the key from the hash and returns the value
+        #in a single method call.
+        parameter.value = given_parameters.delete parameter.name
+      end
+    end
+
+    #Create new parameters
+    new_parameters = given_parameters.map do |name, parameter|
+      Parameter.new :key => name, :value => parameter
+    end
+
+    group.parameters = group.parameters + new_parameters
+
+    begin
+      group.save!
+      puts "Node group parameters successfully edited for #{group.name}!"
+    rescue => e
+      puts "There was a problem saving the node group: #{e.message}"
+      exit 1
+    end
+
+  end
+
   desc 'Edit a node group'
   task :edit => :environment do
     if ENV['name']
diff --git a/lib/tasks/node.rake b/lib/tasks/node.rake
index d44bf29..944f5ee 100644
--- a/lib/tasks/node.rake
+++ b/lib/tasks/node.rake
@@ -73,11 +73,12 @@ namespace :node do
 
   desc 'Add/Edit class(es) for a node'
   task :classes => :environment do
+    node_name = ENV['name']
     begin
-      node = Node.find_by_name(ENV['name'])
+      node = Node.find_by_name(name_name)
 
       if node.nil?
-        puts 'Node doesn\'t exist!'
+        puts "Node #{node_name} doesn\'t exist!"
         exit 1
       end
     rescue NameError
@@ -114,13 +115,79 @@ namespace :node do
     end
   end
 
+  desc 'Edit/Add parameters for a node'
+  task :parameters => :environment do
+    node_name = ENV['name']
+
+    if node_name.nil?
+      puts 'Must specify node name (name=<hostname>).'
+      exit 1
+    end
+
+    begin
+      node = Node.find_by_name(node_name)
+
+      if node.nil?
+        puts "Node #{node_name} doesn\'t exist!"
+        exit 1
+      end
+    rescue => e
+      puts "There was a problem finding the node: #{e.message}"
+      exit 1
+    end
+
+    if ENV['parameters'].nil?
+      puts "Must specify node parameters (parameters=param1=val1,param2=val2)"
+      exit 1
+    end
+
+    given_parameters = Hash[ ENV['parameters'].split(',').map do |param|
+      param_array = param.split('=',2)
+      if param_array.size != 2
+        raise ArgumentError, "Could not parse parameter #{param_array.first} given. Perhaps you're missing a '='"
+      end
+      if param_array[0].nil? or param_array[0].empty?
+        raise ArgumentError, "Could not parse parameters. Please check your format. Perhaps you need to name a parameter before a '='"
+      end
+      if param_array[1].nil? or param_array[1].empty?
+        raise ArgumentError, "Could not parse parameters #{param_array.first}. Please check your format"
+      end
+      param_array
+    end ]
+
+    #Check if we need to change any existing parameters
+    node.parameters.each do |parameter|
+      if given_parameters.keys.include? parameter.name
+        #This deletes the key from the hash and returns the value
+        #in a single method call.
+        parameter.value = given_parameters.delete parameter.name
+      end
+    end
+
+    #Create new parameters
+    new_parameters = given_parameters.map do |name, parameter|
+      Parameter.new :key => name, :value => parameter
+    end
+
+    node.parameters = node.parameters + new_parameters
+
+    begin
+      node.save!
+      puts "Node parameters successfully edited for #{node.name}!"
+    rescue => e
+      puts "There was a problem saving the node: #{e.message}"
+      exit 1
+    end
+  end
+
   desc 'Edit/Add groups for a node'
   task :groups => :environment do
+    node_name = ENV['name']
     begin
-      node = Node.find_by_name(ENV['name'])
+      node = Node.find_by_name(node_name)
 
       if node.nil?
-        puts 'Node doesn\'t exist!'
+        puts "Node #{node_name} doesn\'t exist!"
         exit 1
       end
     rescue NameError
diff --git a/vendor/rails/actionmailer/Rakefile b/vendor/rails/actionmailer/Rakefile
index ba85056..7e0a023 100644
--- a/vendor/rails/actionmailer/Rakefile
+++ b/vendor/rails/actionmailer/Rakefile
@@ -54,7 +54,7 @@ spec = Gem::Specification.new do |s|
   s.rubyforge_project = "actionmailer"
   s.homepage = "http://www.rubyonrails.org"
 
-  s.add_dependency('actionpack', '= 2.3.12' + PKG_BUILD)
+  s.add_dependency('actionpack', '= 2.3.14' + PKG_BUILD)
 
   s.requirements << 'none'
   s.require_path = 'lib'
diff --git a/vendor/rails/actionmailer/lib/action_mailer/version.rb b/vendor/rails/actionmailer/lib/action_mailer/version.rb
index ce0b782..7627ff2 100644
--- a/vendor/rails/actionmailer/lib/action_mailer/version.rb
+++ b/vendor/rails/actionmailer/lib/action_mailer/version.rb
@@ -2,7 +2,7 @@ module ActionMailer
   module VERSION #:nodoc:
     MAJOR = 2
     MINOR = 3
-    TINY  = 12
+    TINY  = 14
 
     STRING = [MAJOR, MINOR, TINY].join('.')
   end
diff --git a/vendor/rails/actionmailer/test/fixtures/test_mailer/implicitly_multipart_example.rhtml.bak b/vendor/rails/actionmailer/test/fixtures/test_mailer/implicitly_multipart_example.rhtml.bak
new file mode 100644
index 0000000..6940419
--- /dev/null
+++ b/vendor/rails/actionmailer/test/fixtures/test_mailer/implicitly_multipart_example.rhtml.bak
@@ -0,0 +1 @@
+Ignored when searching for implicitly multipart parts.
diff --git a/vendor/rails/actionmailer/test/fixtures/test_mailer/implicitly_multipart_example.text.html.erb~ b/vendor/rails/actionmailer/test/fixtures/test_mailer/implicitly_multipart_example.text.html.erb~
new file mode 100644
index 0000000..946d99e
--- /dev/null
+++ b/vendor/rails/actionmailer/test/fixtures/test_mailer/implicitly_multipart_example.text.html.erb~
@@ -0,0 +1,10 @@
+<html>
+  <body>
+    HTML formatted message to <strong><%= @recipient %></strong>.
+  </body>
+</html>
+<html>
+  <body>
+    HTML formatted message to <strong><%= @recipient %></strong>.
+  </body>
+</html>
diff --git a/vendor/rails/actionpack/CHANGELOG b/vendor/rails/actionpack/CHANGELOG
index af6b0be..3270c72 100644
--- a/vendor/rails/actionpack/CHANGELOG
+++ b/vendor/rails/actionpack/CHANGELOG
@@ -1935,7 +1935,7 @@ superclass' view_paths.  [Rick Olson]
 
 * Update documentation for erb trim syntax. #5651 [matt@mattmargolis.net]
 
-* Pass :id => nil or :class => nil to error_messages_for to supress that html attribute. #3586 [olivier_ansaldi@yahoo.com, sebastien@goetzilla.info]
+* Pass :id => nil or :class => nil to error_messages_for to supress that html attribute. #3586 [olivier_ansaldi@yahoo.com]
 
 * Reset @html_document between requests so assert_tag works. #4810 [Jarkko Laine, easleydp@gmail.com]
 
@@ -2532,7 +2532,7 @@ superclass' view_paths.  [Rick Olson]
 
 * Provide support for decimal columns to form helpers. Closes #5672. [Dave Thomas]
 
-* Pass :id => nil or :class => nil to error_messages_for to supress that html attribute. #3586 [olivier_ansaldi@yahoo.com, sebastien@goetzilla.info]
+* Pass :id => nil or :class => nil to error_messages_for to supress that html attribute. #3586 [olivier_ansaldi@yahoo.com]
 
 * Reset @html_document between requests so assert_tag works. #4810 [Jarkko Laine, easleydp@gmail.com]
 
diff --git a/vendor/rails/actionpack/Rakefile b/vendor/rails/actionpack/Rakefile
index 004ed54..ce4c41a 100644
--- a/vendor/rails/actionpack/Rakefile
+++ b/vendor/rails/actionpack/Rakefile
@@ -78,7 +78,7 @@ spec = Gem::Specification.new do |s|
 
   s.requirements << 'none'
 
-  s.add_dependency('activesupport', '= 2.3.12' + PKG_BUILD)
+  s.add_dependency('activesupport', '= 2.3.14' + PKG_BUILD)
   s.add_dependency('rack', '~> 1.1.0')
 
   s.require_path = 'lib'
diff --git a/vendor/rails/actionpack/lib/action_controller/response.rb b/vendor/rails/actionpack/lib/action_controller/response.rb
index 815f749..ff1702e 100644
--- a/vendor/rails/actionpack/lib/action_controller/response.rb
+++ b/vendor/rails/actionpack/lib/action_controller/response.rb
@@ -64,12 +64,13 @@ module ActionController # :nodoc:
     # the character set information will also be included in the content type
     # information.
     def content_type=(mime_type)
-      self.headers["Content-Type"] =
+      new_content_type =
         if mime_type =~ /charset/ || (c = charset).nil?
           mime_type.to_s
         else
           "#{mime_type}; charset=#{c}"
         end
+      self.headers["Content-Type"] = URI.escape(new_content_type, "\r\n")
     end
 
     # Returns the response's content MIME type, or nil if content type has been set.
diff --git a/vendor/rails/actionpack/lib/action_pack/version.rb b/vendor/rails/actionpack/lib/action_pack/version.rb
index 010bfcb..330eecb 100644
--- a/vendor/rails/actionpack/lib/action_pack/version.rb
+++ b/vendor/rails/actionpack/lib/action_pack/version.rb
@@ -2,7 +2,7 @@ module ActionPack #:nodoc:
   module VERSION #:nodoc:
     MAJOR = 2
     MINOR = 3
-    TINY  = 12
+    TINY  = 14
 
     STRING = [MAJOR, MINOR, TINY].join('.')
   end
diff --git a/vendor/rails/actionpack/test/controller/content_type_test.rb b/vendor/rails/actionpack/test/controller/content_type_test.rb
index 32c1757..852fbfa 100644
--- a/vendor/rails/actionpack/test/controller/content_type_test.rb
+++ b/vendor/rails/actionpack/test/controller/content_type_test.rb
@@ -46,6 +46,11 @@ class ContentTypeController < ActionController::Base
       format.rss  { render :text   => "hello world!", :content_type => Mime::XML }
     end
   end
+  
+  def render_content_type_from_user_input
+    response.content_type= params[:hello]
+    render :text=>"hello"
+  end
 
   def rescue_action(e) raise end
 end
@@ -129,6 +134,11 @@ class ContentTypeTest < ActionController::TestCase
     assert_equal Mime::HTML, @response.content_type
     assert_equal "utf-8", @response.charset
   end
+  
+  def test_user_supplied_value
+    get :render_content_type_from_user_input, :hello=>"hello/world\r\nAttack: true"
+    assert_equal "hello/world%0D%0AAttack: true", @response.content_type
+  end
 end
 
 class AcceptBasedContentTypeTest < ActionController::TestCase
diff --git a/vendor/rails/actionpack/test/controller/html-scanner/sanitizer_test.rb b/vendor/rails/actionpack/test/controller/html-scanner/sanitizer_test.rb
index 1923544..9203251 100644
--- a/vendor/rails/actionpack/test/controller/html-scanner/sanitizer_test.rb
+++ b/vendor/rails/actionpack/test/controller/html-scanner/sanitizer_test.rb
@@ -5,6 +5,13 @@ class SanitizerTest < ActionController::TestCase
     @sanitizer = nil # used by assert_sanitizer
   end
 
+  def test_strip_tags_with_quote
+    sanitizer = HTML::FullSanitizer.new
+    string    = '<" <img src="trollface.gif" onload="alert(1)"> hi'
+
+    assert_equal ' hi', sanitizer.sanitize(string)
+  end
+
   def test_strip_tags
     sanitizer = HTML::FullSanitizer.new
     assert_equal("<<<bad html", sanitizer.sanitize("<<<bad html"))
diff --git a/vendor/rails/actionpack/test/fixtures/test/hello_world.erb~ b/vendor/rails/actionpack/test/fixtures/test/hello_world.erb~
new file mode 100644
index 0000000..21934a1
--- /dev/null
+++ b/vendor/rails/actionpack/test/fixtures/test/hello_world.erb~
@@ -0,0 +1 @@
+Don't pick me!
\ No newline at end of file
diff --git a/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.en.html.erb~ b/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.en.html.erb~
new file mode 100644
index 0000000..d009950
--- /dev/null
+++ b/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.en.html.erb~
@@ -0,0 +1 @@
+Don't render me!
\ No newline at end of file
diff --git a/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.erb~ b/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.erb~
new file mode 100644
index 0000000..d009950
--- /dev/null
+++ b/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.erb~
@@ -0,0 +1 @@
+Don't render me!
\ No newline at end of file
diff --git a/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.html.erb~ b/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.html.erb~
new file mode 100644
index 0000000..d009950
--- /dev/null
+++ b/vendor/rails/actionpack/test/fixtures/test/malformed/malformed.html.erb~
@@ -0,0 +1 @@
+Don't render me!
\ No newline at end of file
diff --git a/vendor/rails/activerecord/Rakefile b/vendor/rails/activerecord/Rakefile
index dcdff6b..50210c0 100644
--- a/vendor/rails/activerecord/Rakefile
+++ b/vendor/rails/activerecord/Rakefile
@@ -192,7 +192,7 @@ spec = Gem::Specification.new do |s|
     s.files = s.files + Dir.glob( "#{dir}/**/*" ).delete_if { |item| item.include?( "\.svn" ) }
   end
 
-  s.add_dependency('activesupport', '= 2.3.12' + PKG_BUILD)
+  s.add_dependency('activesupport', '= 2.3.14' + PKG_BUILD)
 
   s.files.delete FIXTURES_ROOT + "/fixture_database.sqlite"
   s.files.delete FIXTURES_ROOT + "/fixture_database_2.sqlite"
diff --git a/vendor/rails/activerecord/lib/active_record/validations.rb b/vendor/rails/activerecord/lib/active_record/validations.rb
index 5961b54..643f1e0 100644
--- a/vendor/rails/activerecord/lib/active_record/validations.rb
+++ b/vendor/rails/activerecord/lib/active_record/validations.rb
@@ -333,7 +333,6 @@ module ActiveRecord
     end
 
     def generate_message(attribute, message = :invalid, options = {})
-      ActiveSupport::Deprecation.warn("ActiveRecord::Errors#generate_message has been deprecated. Please use ActiveRecord::Error.new().to_s.")
       Error.new(@base, attribute, message, options).to_s
     end
   end
diff --git a/vendor/rails/activerecord/lib/active_record/version.rb b/vendor/rails/activerecord/lib/active_record/version.rb
index db0e08e..d029104 100644
--- a/vendor/rails/activerecord/lib/active_record/version.rb
+++ b/vendor/rails/activerecord/lib/active_record/version.rb
@@ -2,7 +2,7 @@ module ActiveRecord
   module VERSION #:nodoc:
     MAJOR = 2
     MINOR = 3
-    TINY  = 12
+    TINY  = 14
 
     STRING = [MAJOR, MINOR, TINY].join('.')
   end
diff --git a/vendor/rails/activerecord/test/cases/base_test.rb b/vendor/rails/activerecord/test/cases/base_test.rb
index e9af77c..242be2a 100755
--- a/vendor/rails/activerecord/test/cases/base_test.rb
+++ b/vendor/rails/activerecord/test/cases/base_test.rb
@@ -79,6 +79,23 @@ end
 class BasicsTest < ActiveRecord::TestCase
   fixtures :topics, :companies, :developers, :projects, :computers, :accounts, :minimalistics, 'warehouse-things', :authors, :categorizations, :categories, :posts
 
+  def test_column_names_are_escaped
+    conn      = ActiveRecord::Base.connection
+    classname = conn.class.name[/[^:]*$/]
+    badchar   = {
+      'SQLite3Adapter'    => '"',
+      'MysqlAdapter'      => '`',
+      'Mysql2Adapter'     => '`',
+      'PostgreSQLAdapter' => '"',
+      'OracleAdapter'     => '"',
+    }.fetch(classname) {
+      raise "need a bad char for #{classname}"
+    }
+
+    quoted = conn.quote_column_name "foo#{badchar}bar"
+    assert_equal("#{badchar}foo#{badchar * 2}bar#{badchar}", quoted)
+  end
+
   def test_table_exists
     assert !NonExistentTable.table_exists?
     assert Topic.table_exists?
diff --git a/vendor/rails/activerecord/test/fixtures/fixture_database.sqlite3 b/vendor/rails/activerecord/test/fixtures/fixture_database.sqlite3
deleted file mode 100644
index b3299c6..0000000
Binary files a/vendor/rails/activerecord/test/fixtures/fixture_database.sqlite3 and /dev/null differ
diff --git a/vendor/rails/activerecord/test/fixtures/fixture_database_2.sqlite3 b/vendor/rails/activerecord/test/fixtures/fixture_database_2.sqlite3
deleted file mode 100644
index f106c80..0000000
Binary files a/vendor/rails/activerecord/test/fixtures/fixture_database_2.sqlite3 and /dev/null differ
diff --git a/vendor/rails/activeresource/Rakefile b/vendor/rails/activeresource/Rakefile
index f298853..f153513 100644
--- a/vendor/rails/activeresource/Rakefile
+++ b/vendor/rails/activeresource/Rakefile
@@ -66,7 +66,7 @@ spec = Gem::Specification.new do |s|
     s.files = s.files + Dir.glob( "#{dir}/**/*" ).delete_if { |item| item.include?( "\.svn" ) }
   end
   
-  s.add_dependency('activesupport', '= 2.3.12' + PKG_BUILD)
+  s.add_dependency('activesupport', '= 2.3.14' + PKG_BUILD)
 
   s.require_path = 'lib'
 
diff --git a/vendor/rails/activeresource/lib/active_resource/version.rb b/vendor/rails/activeresource/lib/active_resource/version.rb
index 6ef5f11..d8b34f1 100644
--- a/vendor/rails/activeresource/lib/active_resource/version.rb
+++ b/vendor/rails/activeresource/lib/active_resource/version.rb
@@ -2,7 +2,7 @@ module ActiveResource
   module VERSION #:nodoc:
     MAJOR = 2
     MINOR = 3
-    TINY  = 12
+    TINY  = 14
 
     STRING = [MAJOR, MINOR, TINY].join('.')
   end
diff --git a/vendor/rails/activesupport/lib/active_support/ordered_hash.rb b/vendor/rails/activesupport/lib/active_support/ordered_hash.rb
index 5445412..5e48c02 100644
--- a/vendor/rails/activesupport/lib/active_support/ordered_hash.rb
+++ b/vendor/rails/activesupport/lib/active_support/ordered_hash.rb
@@ -130,14 +130,18 @@ module ActiveSupport
       end
 
       def merge!(other_hash)
-        other_hash.each {|k,v| self[k] = v }
+        if block_given?
+          other_hash.each { |k, v| self[k] = key?(k) ? yield(k, self[k], v) : v }
+        else
+          other_hash.each { |k, v| self[k] = v }
+        end
         self
       end
 
       alias_method :update, :merge!
 
-      def merge(other_hash)
-        dup.merge!(other_hash)
+      def merge(other_hash, &block)
+        dup.merge!(other_hash, &block)
       end
 
       # When replacing with another hash, the initial order of our keys must come from the other hash -ordered or not.
diff --git a/vendor/rails/activesupport/lib/active_support/version.rb b/vendor/rails/activesupport/lib/active_support/version.rb
index eee0a63..0fbeaa6 100644
--- a/vendor/rails/activesupport/lib/active_support/version.rb
+++ b/vendor/rails/activesupport/lib/active_support/version.rb
@@ -2,7 +2,7 @@ module ActiveSupport
   module VERSION #:nodoc:
     MAJOR = 2
     MINOR = 3
-    TINY  = 12
+    TINY  = 14
 
     STRING = [MAJOR, MINOR, TINY].join('.')
   end
diff --git a/vendor/rails/railties/Rakefile b/vendor/rails/railties/Rakefile
index 01ac701..c3d8eeb 100644
--- a/vendor/rails/railties/Rakefile
+++ b/vendor/rails/railties/Rakefile
@@ -313,11 +313,11 @@ spec = Gem::Specification.new do |s|
   EOF
 
   s.add_dependency('rake', '>= 0.8.3')
-  s.add_dependency('activesupport',    '= 2.3.12' + PKG_BUILD)
-  s.add_dependency('activerecord',     '= 2.3.12' + PKG_BUILD)
-  s.add_dependency('actionpack',       '= 2.3.12' + PKG_BUILD)
-  s.add_dependency('actionmailer',     '= 2.3.12' + PKG_BUILD)
-  s.add_dependency('activeresource',   '= 2.3.12' + PKG_BUILD)
+  s.add_dependency('activesupport',    '= 2.3.14' + PKG_BUILD)
+  s.add_dependency('activerecord',     '= 2.3.14' + PKG_BUILD)
+  s.add_dependency('actionpack',       '= 2.3.14' + PKG_BUILD)
+  s.add_dependency('actionmailer',     '= 2.3.14' + PKG_BUILD)
+  s.add_dependency('activeresource',   '= 2.3.14' + PKG_BUILD)
 
   s.rdoc_options << '--exclude' << '.'
 
diff --git a/vendor/rails/railties/lib/rails/version.rb b/vendor/rails/railties/lib/rails/version.rb
index 94df7c1..b89643f 100644
--- a/vendor/rails/railties/lib/rails/version.rb
+++ b/vendor/rails/railties/lib/rails/version.rb
@@ -2,7 +2,7 @@ module Rails
   module VERSION #:nodoc:
     MAJOR = 2
     MINOR = 3
-    TINY  = 12
+    TINY  = 14
 
     STRING = [MAJOR, MINOR, TINY].join('.')
   end
diff --git a/vendor/rails/railties/lib/tasks/documentation.rake b/vendor/rails/railties/lib/tasks/documentation.rake
index bc7887b..b3111a5 100644
--- a/vendor/rails/railties/lib/tasks/documentation.rake
+++ b/vendor/rails/railties/lib/tasks/documentation.rake
@@ -1,3 +1,5 @@
+begin
+  require 'rdoc/task'
 namespace :doc do
   desc "Generate documentation for the application. Set custom template with TEMPLATE=/path/to/rdoc/template.rb or title with TITLE=\"Custom Title\""
   RDoc::Task.new("app") { |rdoc|
@@ -86,3 +88,6 @@ namespace :doc do
     end
   end
 end
+rescue LoadError
+  $stderr.puts 'Please install RDoc 2.4.2+ to generate documentation.'
+end
